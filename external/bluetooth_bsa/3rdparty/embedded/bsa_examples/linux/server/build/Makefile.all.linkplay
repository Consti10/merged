#######################################
#  This makefile is written for a GNU make or equivalent.
#  For example:
#   make clean
#   make
# Copyright (c) 2016, Cypress Semiconductor., All Rights Reserved.
# Proprietary and confidential.
#######################################

SERVER_DIR := ../../server/build/
SVT_DIR := ../../../../bsa_svt/linux/server/build/
SVT_CUST_DIR := ../../../../bsa_svt/linux/custom_build/
BTUSB_DIR := ../../../../brcm/linux/btusb/
BTHID_DIR := ../../../../brcm/linux/bthid/
BTDL_DIR := ../../../../brcm/linux/btdl/build

SERVER_ALT_CONFIG_TXT := $(wildcard bsa_server*.txt)
SERVER_ALT_CONFIG := $(patsubst %.txt, %, $(SERVER_ALT_CONFIG_TXT))

# Check if the local machine is 32 or 64 bits for x86
LBIT := $(shell getconf LONG_BIT)
ifeq ($(LBIT), 64)
    BUILD_CPU := x86_64
else
#$(warning Defaulting CPU to x86)
   BUILD_CPU := x86
endif
CPU ?= $(BUILD_CPU)

LIBBSA_DIR := ../../libbsa/build/
APP_DIRS := \
	../../app_hh/build/ \
	../../app_manager/build/ \
	../../app_hs/build/ \
	../../app_avk/build/ \
	../../app_av/build/ \
	../../app_ag/build/ \
	../../app_dg/build/ \
	../../app_ble/build/ \
	../../simple_app/build      \
    ../../app_tm/build/

PROJECT_EXAMPLE_SERVER_DIR := ../../../../bsa_project_example/my_project/bsa_server/build

# all applications require LIBBSA build
$(APP_DIRS): $(LIBBSA_DIR)

BUILD_DIRS := $(SERVER_DIR) $(LIBBSA_DIR) $(APP_DIRS)

ifeq ($(shell uname -s),FreeBSD)
# FreeBSD: by default, add the netgraph library (export it to pass it down to invoked makefiles)
export EXTRALIBS += netgraph
endif

.PHONY: help all $(BUILD_DIRS) clean nuke alt-config svt btusb delivery binarydelivery regression $(SERVER_ALT_CONFIG)

help:
	@echo "Makefile.all supported targets"
	@echo "  help               : this menu"
	@echo "  all                : build the default server and all the applications"
	@echo "  clean              : clean the default server and all the applications"
	@echo "  applications       : build all the sample applications, not the server"
	@echo "  applications_clean : clean all the sample applications"
	@echo "  whats              : build the whats application"
	@echo "  alt-config         : build all the alternate servers (using alternate .txt"
	@echo "                       configuration files)"
	@echo "  svt                : build the svt server"
	@echo "  btusb              : build the BT USB linux driver"
	@echo "  regression         : run a compilation regression, compiliing everything"
	@echo "  custom_regression  : run a compilation regression on custom build only"
	@echo "  delivery           : make a delivery"
	@echo "  binarydelivery     : make a binary delivery"
	@echo ""
	@echo "Examples:"
	@echo "  make -f Makefile.all all"
	@echo "  make -f Makefile.all nuke"

all: $(BUILD_DIRS)

clean:
	@for dir in $(BUILD_DIRS); do \
		$(MAKE) -C $$dir clean; \
	done

nuke:
	@echo Nuking all potentially generated files
	@rm -f alternate-server.txt
	@rm -f whats.exe whats
	@rm -f ../include/buildcfg.h
	@for dir in $(BUILD_DIRS); do \
	if [ -d "$$dir/mips" ]; then \
		rm -rf $$dir/mips; \
	fi; \
	if [ -d "$$dir/arm" ]; then \
		rm -rf $$dir/arm; \
	fi; \
	if [ -d "$$dir/x86" ]; then \
		rm -rf $$dir/x86; \
	fi; \
	if [ -d "$$dir/x86_64" ]; then \
		rm -rf $$dir/x86_64; \
	fi ;\
	done
	@rm -f ../../libbsa/include/*.h


$(BUILD_DIRS):
	@echo Building $@
	@$(MAKE) -C $@

applications: $(LIBBSA_DIR) $(APP_DIRS)

applications_clean:
	@for dir in $(LIBBSA_DIR) $(APP_DIRS); do \
		$(MAKE) -C $$dir clean; \
	done

whats:whats.c
	gcc whats.c -o whats

$(SERVER_ALT_CONFIG): whats
	@echo Building BSA Server for $@
	@$(MAKE) -C $(SERVER_DIR) target=$@ clean
	@$(MAKE) -C $(SERVER_DIR) target=$@
	@rm ../include/buildcfg.h
	./whats $@ >> alternate-server.txt
	@echo Update doc done

start_alt_config:
	@echo Building BSA with alternate configurations
	@rm -f alternate-server.txt

alt-config: start_alt_config $(SERVER_ALT_CONFIG)
	@echo alt-config done

svt:
	@echo Building BSA_SVT server
	@$(MAKE) -C $(SVT_DIR) clean
	@$(MAKE) -C $(SVT_DIR)

btusb_install:
	@echo Installing BTUSB driver
	#mknod /dev/btusb0 c 180 194
	sudo rmmod $(BTUSB_DIR)/btusb.ko
	sudo insmod $(BTUSB_DIR)/btusb.ko
	sudo chmod 777 /dev/btusb0

btusb:
	@echo Building BTUSB driver
	@$(MAKE) -C $(BTUSB_DIR) clean
	@$(MAKE) -C $(BTUSB_DIR)

bthid:
	@echo Building BTHID driver
	@$(MAKE) -C $(BTHID_DIR) clean
	@$(MAKE) -C $(BTHID_DIR)

btdl:
	@echo Building BTDL tool
	@$(MAKE) -C $(BTDL_DIR) clean
	@$(MAKE) -C $(BTDL_DIR)

regression: nuke applications alt-config svt custom_regression btusb binarydelivery delivery btdl bthid
	@echo Regression build was successful

custom_regression:
	$(MAKE) -C $(SVT_CUST_DIR) nuke
	$(MAKE) -C $(SVT_CUST_DIR) clean
	$(MAKE) -C $(SVT_CUST_DIR) all

check_btm_in_bsa:
	@for f in `ls x86/obj/bsa_*.o`; do \
	nm -u $$f |grep BTM_; \
	if [[ $$? == 0 ]]; then \
	echo $$f ; \
	fi ; \
	done

delivery:
	@for dir in $(BUILD_DIRS); do \
		$(MAKE) -C $$dir delivery; \
		if [ $$? != 0 ]; then exit 2; fi; \
	done
	$(MAKE) -C $(SERVER_DIR) builddelivery
	$(MAKE) -C $(SERVER_DIR) cleandelivery
	@echo Delivering $(PROJECT_EXAMPLE_SERVER_DIR)
	$(MAKE) -C $(PROJECT_EXAMPLE_SERVER_DIR) -f Makefile.all delivery
	$(MAKE) -C $(SERVER_DIR) zipdelivery

removedeliveryfolder:
	$(MAKE) -C $(SERVER_DIR) removedeliveryfolder

removedeliveryfile:
	$(MAKE) -C $(SERVER_DIR) removedeliveryfile

binarydelivery:
	$(MAKE) -f Makefile.all all CPU=$(BUILD_CPU)
	$(MAKE) -f Makefile.all all CPU=$(CPU)
	$(MAKE) -C $(SERVER_DIR) binarydelivery
	@for dir in $(LIBBSA_DIR) $(APP_DIRS); do \
		$(MAKE) -C $$dir delivery; \
		if [ $$? != 0 ]; then exit 2; fi; \
	done
	@echo Delivering $(PROJECT_EXAMPLE_SERVER_DIR)
	$(MAKE) -C $(PROJECT_EXAMPLE_SERVER_DIR) -f Makefile.all binarydelivery
	$(MAKE) -C $(SERVER_DIR) renamebinarydelivery
	$(MAKE) -C $(SERVER_DIR) zipbinarydelivery

removebinarydeliveryfolder:
	$(MAKE) -C $(SERVER_DIR) removebinarydeliveryfolder

